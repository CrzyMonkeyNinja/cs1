module listNat

import nat
import pair
import bool

data listNat = nil | cons nat listNat

len: listNat -> nat
len nil = O
len (cons n l') = S (len l')

reverseN: listNat -> listNat
reverseN nil = nil

last: listNat -> nat
last (cons n nil) = n
last (cons n list) = last list

index: pair listNat nat -> nat
index (mkPair (cons n nil) (S m)) = n
index (mkPair (cons n list) O) = n
index (mkPair (cons n list) (S m)) = (index (mkPair (list) (m)))

removeLast: listNat -> listNat
removeLast (cons n nil) = nil
removeLast (cons n list) = (cons n (removeLast list))

append: pair listNat listNat -> listNat
append (mkPair nil list) = list
append (mkPair list nil) = list
{-
append (mkPair (cons n list1) (cons m list2)) = (append (mkPair (list1) (cons n (cons m list2))))

The above was my old definition for the recursive rule of append,
which was giving the backwards-appending, as in [1,2,3 ] & [4, 5]
became [3, 2, 1, 4, 5] the below was my attempt to fix that.
-}
--append (mkPair (cons n list1) (cons m list2)) = (append (mkPair (removeLast (cons n list1)) (cons (last (cons n list1)) (cons m list2))))
append (mkPair (cons n list1) list2) = (cons n (append (mkPair list1 list2)))

snoc: pair nat listNat -> listNat
snoc (mkPair n nil) = (cons n nil)
snoc (mkPair n list) = append (mkPair list (cons n nil))
